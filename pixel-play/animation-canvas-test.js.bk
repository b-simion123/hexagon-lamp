const ws281x = require('rpi-sk6812');

//Animations
//State 1 - Rainbow
// magic number from https://en.wikipedia.org/wiki/Hexagon#Parameters
const HEX_HEIGHT_RATIO = 0.8660254;
const LUT_W = 15;
const LUT_H = 16;

const { createCanvas, loadImage } = require('canvas')
const canvas = createCanvas(LUT_W, LUT_H)
// const canvas = createCanvas(8, 16)
const ctx = canvas.getContext('2d')

ctx.fillStyle = 'black';
ctx.fillRect(0,0,LUT_W,LUT_H);
ctx.strokeStyle = '#0000ff';
ctx.strokeRect(1, 1, LUT_W-1, LUT_H-1);
ctx.font = '12px serif';
// ctx.fillText('Hello world', 50, 90);

var ctxData = ctx.getImageData(0,0,LUT_W,LUT_H).data;
var ctxDataLength = ctxData.length;


// const LUT = [
//  -1,-1, 0, 1, 2, 3,-1,-1,
//  -1, 8, 7, 6, 5, 4,-1,-1,
//  -1, 9,10,11,12,13,-1,-1,
//  -1,19,18,17,16,15,14,-1,
//  -1,20,21,22,23,24,25,-1,
//  32,31,30,29,28,27,26,-1,
//  33,34,35,36,37,38,39,-1,
//  47,46,45,44,43,42,41,40,
//  48,49,50,51,52,53,54,55,
//  62,61,60,59,58,57,56,-1,
//  63,64,65,66,67,68,69,-1,
//  -1,75,74,73,72,71,70,-1,
//  -1,76,77,78,79,80,81,-1,
//  -1,86,85,84,83,82,-1,-1,
//  -1,87,88,89,90,91,-1,-1,
//  -1,-1,95,94,93,92,-1,-1,
// ]

const LUT = [
 -1,-1,-1,-1, 0,-1, 1,-1, 2,-1, 3,-1,-1,-1,-1,
 -1,-1,-1, 8,-1, 7,-1, 6,-1, 5,-1, 4,-1,-1,-1,
 -1,-1,-1, 9,-1,10,-1,11,-1,12,-1,13,-1,-1,-1,
 -1,-1,19,-1,18,-1,17,-1,16,-1,15,-1,14,-1,-1,
 -1,-1,20,-1,21,-1,22,-1,23,-1,24,-1,25,-1,-1,
 -1,32,-1,31,-1,30,-1,29,-1,28,-1,27,-1,26,-1,
 -1,33,-1,34,-1,35,-1,36,-1,37,-1,38,-1,39,-1,
 47,-1,46,-1,45,-1,44,-1,43,-1,42,-1,41,-1,40,
 48,-1,49,-1,50,-1,51,-1,52,-1,53,-1,54,-1,55,
 -1,62,-1,61,-1,60,-1,59,-1,58,-1,57,-1,56,-1,
 -1,63,-1,64,-1,65,-1,66,-1,67,-1,68,-1,69,-1,
 -1,-1,75,-1,74,-1,73,-1,72,-1,71,-1,70,-1,-1,
 -1,-1,76,-1,77,-1,78,-1,79,-1,80,-1,81,-1,-1,
 -1,-1,-1,86,-1,85,-1,84,-1,83,-1,82,-1,-1,-1,
 -1,-1,-1,87,-1,88,-1,89,-1,90,-1,91,-1,-1,-1,
 -1,-1,-1,-1,95,-1,94,-1,93,-1,92,-1,-1,-1,-1,
]

const LUT_LENGTH = LUT.length;

// console.log(JSON.stringify(ctxData));
// const fs = require('fs')
// const out = fs.createWriteStream(__dirname + '/test.png')
// const stream = canvas.createPNGStream()
// stream.pipe(out)
// out.on('finish', () =>  console.log('The PNG file was created.'))

const NUM_LEDS = 96;
pixelData = new Uint32Array(NUM_LEDS);


const config =
{"leds" : 96,
"brightness" : 51,
"strip" : 'grbw',
// "strip" : 'rgbw' 
// "strip": "wgrb"
}

ws281x.configure(config);

function rgb2Int(r, g, b) {
    return ((r & 0xff) << 16) + ((g & 0xff) << 8) + (b & 0xff);
}

function rainbow() {
  var offset = 0;
  console.log("running rainbow");
  let frame = 0;
  let scrollX = 0;
  let saved = false;
  let txt = 'Hello Tiger!';
  scrollW = ctx.measureText(txt).width;

  setInterval(function () {
    frame++;
    scrollX -= 0.25;
    if(scrollX < -scrollW) scrollX = LUT_W;
	// let now = Date.now();
  // for(var i = 0, j = 0; i < NUM_LEDS; i++, j+= 4) {
  //   //pixelData[i] = colorwheel((offset + i) % 256);
  //   pixelData[i] = rgb2Int(ctxData[0],
  //                          ctxData[1],
  //                          ctxData[2]);
  //   console.log(pixelData[i].toString(16))
  // }
  now = Date.now();
  ctx.clearRect(0, 0, LUT_W, LUT_H);
  ctx.fillStyle = 'black';
  ctx.fillRect(0,0,LUT_W,LUT_H);
  ctx.fillStyle = 'white';
  // ctx.strokeStyle = '#0000ff';
  // ctx.strokeStyle = 'rgbw';
  ctx.beginPath();
  let s = (Math.sin(frame * 0.1) + 1.0);
  // ctx.arc(4, 8,  4, 0, Math.PI * 2, true);
  // ctx.arc(LUT_H / 2,LUT_H/2,s * 4, 0, Math.PI * 2, true);
  // ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);
  r = s * 4;
  ctx.ellipse(LUT_H / 2,LUT_H/2, r, r * HEX_HEIGHT_RATIO, 0, 0, 2 * Math.PI);
  // ctx.rect(4,0,s * LUT_W * 0.5,s * LUT_W * 0.5);
  // ctx.fillText(txt, scrollX, LUT_H * .75);
  // ctx.fill();
  ctx.stroke();

  if(!saved){
    const fs = require('fs')
    const out = fs.createWriteStream(__dirname + '/test.png')
    const stream = canvas.createPNGStream()
    stream.pipe(out)
    out.on('finish', () =>  console.log('The PNG file was created.'))
    saved = true;
  }

  ctxData = ctx.getImageData(0,0,LUT_W,LUT_H).data;
  
  // console.log(frame);
  // var ctxDataLength = ctxData.length;
  for(var pixelIndex = 0, ctxIndex = 0; pixelIndex < LUT_LENGTH; pixelIndex++, ctxIndex += 4){
      if(LUT[pixelIndex] >= 0){
        // pixelData[LUT[pixelIndex]] = rgb2Int(ctxData[ctxIndex+0],
        //                                      ctxData[ctxIndex+1],
        //                                      ctxData[ctxIndex+2]);
        // console.log(pixelIndex,pixelData[LUT[pixelIndex]].toString(16));
        // pixelData[LUT[pixelIndex]] = ctxData[ctxIndex+0] | (ctxData[ctxIndex+1] << 8) |  (ctxData[ctxIndex+2] << 16) | (ctxData[ctxIndex+3] << 24);
        let r = ctxData[ctxIndex];
        let g = ctxData[ctxIndex+1];
        let b = ctxData[ctxIndex+2];
        let w = ctxData[ctxIndex+3];
        let rgbw = (r << 16) | (g << 8) | b;
        // console.log('r',r,'g',g,'b',b,'rgbw',rgbw,rgbw.toString(16));
        // w, g, r, b with rgbw set
        // w, r,g,b with grbw set
        pixelData[LUT[pixelIndex]] = rgbw;
        //console.log(ctxIndex,ctxDataLength,(ctxData[ctxIndex+0] | (ctxData[ctxIndex+1] << 8) |  (ctxData[ctxIndex+2] << 16) | (ctxData[ctxIndex+3] << 24)).toString(16));
        // console.log(ctxIndex,ctxDataLength,rgb2Int(ctxData[ctxIndex],ctxData[ctxIndex+1],ctxData[ctxIndex+2]).toString(16));
      }
      
  }

  console.log("tick",Date.now() - now);
  offset = (offset + 1) % 256;
  ws281x.render(pixelData)
	// console.log(Date.now() - now,"ms per frame");
}
  , 1000/60);
}

function colorwheel(pos) {
  pos = 255 - pos;
  if (pos < 85) { return rgb2Int(255 - pos * 3, 0, pos * 3); }
  else if (pos < 170) { pos -= 85; return rgb2Int(0, pos * 3, 255 - pos * 3); }
  else { pos -= 170; return rgb2Int(pos * 3, 255 - pos * 3, 0); }
}

rainbow();
